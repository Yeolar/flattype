// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JSON_FLATTYPE_FBS_JSON_H_
#define FLATBUFFERS_GENERATED_JSON_FLATTYPE_FBS_JSON_H_

#include "flatbuffers/flatbuffers.h"

namespace flattype {
namespace fbs {
namespace json {

struct Pair;

struct Null;

struct Bool;

struct Int64;

struct Double;

struct String;

struct Array;

struct Object;

struct Json;

enum Type {
  Type_NONE = 0,
  Type_Null = 1,
  Type_Bool = 2,
  Type_Int64 = 3,
  Type_Double = 4,
  Type_String = 5,
  Type_Array = 6,
  Type_Object = 7,
  Type_MIN = Type_NONE,
  Type_MAX = Type_Object
};

inline Type (&EnumValuesType())[8] {
  static Type values[] = {
    Type_NONE,
    Type_Null,
    Type_Bool,
    Type_Int64,
    Type_Double,
    Type_String,
    Type_Array,
    Type_Object
  };
  return values;
}

inline const char **EnumNamesType() {
  static const char *names[] = {
    "NONE",
    "Null",
    "Bool",
    "Int64",
    "Double",
    "String",
    "Array",
    "Object",
    nullptr
  };
  return names;
}

inline const char *EnumNameType(Type e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesType()[index];
}

template<typename T> struct TypeTraits {
  static const Type enum_value = Type_NONE;
};

template<> struct TypeTraits<Null> {
  static const Type enum_value = Type_Null;
};

template<> struct TypeTraits<Bool> {
  static const Type enum_value = Type_Bool;
};

template<> struct TypeTraits<Int64> {
  static const Type enum_value = Type_Int64;
};

template<> struct TypeTraits<Double> {
  static const Type enum_value = Type_Double;
};

template<> struct TypeTraits<String> {
  static const Type enum_value = Type_String;
};

template<> struct TypeTraits<Array> {
  static const Type enum_value = Type_Array;
};

template<> struct TypeTraits<Object> {
  static const Type enum_value = Type_Object;
};

bool VerifyType(flatbuffers::Verifier &verifier, const void *obj, Type type);
bool VerifyTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Pair FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY_TYPE = 4,
    VT_KEY = 6,
    VT_VALUE_TYPE = 8,
    VT_VALUE = 10
  };
  Type key_type() const {
    return static_cast<Type>(GetField<uint8_t>(VT_KEY_TYPE, 0));
  }
  const void *key() const {
    return GetPointer<const void *>(VT_KEY);
  }
  template<typename T> const T *key_as() const;
  const Null *key_as_Null() const {
    return key_type() == Type_Null ? static_cast<const Null *>(key()) : nullptr;
  }
  const Bool *key_as_Bool() const {
    return key_type() == Type_Bool ? static_cast<const Bool *>(key()) : nullptr;
  }
  const Int64 *key_as_Int64() const {
    return key_type() == Type_Int64 ? static_cast<const Int64 *>(key()) : nullptr;
  }
  const Double *key_as_Double() const {
    return key_type() == Type_Double ? static_cast<const Double *>(key()) : nullptr;
  }
  const String *key_as_String() const {
    return key_type() == Type_String ? static_cast<const String *>(key()) : nullptr;
  }
  const Array *key_as_Array() const {
    return key_type() == Type_Array ? static_cast<const Array *>(key()) : nullptr;
  }
  const Object *key_as_Object() const {
    return key_type() == Type_Object ? static_cast<const Object *>(key()) : nullptr;
  }
  Type value_type() const {
    return static_cast<Type>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Null *value_as_Null() const {
    return value_type() == Type_Null ? static_cast<const Null *>(value()) : nullptr;
  }
  const Bool *value_as_Bool() const {
    return value_type() == Type_Bool ? static_cast<const Bool *>(value()) : nullptr;
  }
  const Int64 *value_as_Int64() const {
    return value_type() == Type_Int64 ? static_cast<const Int64 *>(value()) : nullptr;
  }
  const Double *value_as_Double() const {
    return value_type() == Type_Double ? static_cast<const Double *>(value()) : nullptr;
  }
  const String *value_as_String() const {
    return value_type() == Type_String ? static_cast<const String *>(value()) : nullptr;
  }
  const Array *value_as_Array() const {
    return value_type() == Type_Array ? static_cast<const Array *>(value()) : nullptr;
  }
  const Object *value_as_Object() const {
    return value_type() == Type_Object ? static_cast<const Object *>(value()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_KEY_TYPE) &&
           VerifyOffset(verifier, VT_KEY) &&
           VerifyType(verifier, key(), key_type()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyType(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Null *Pair::key_as<Null>() const {
  return key_as_Null();
}

template<> inline const Bool *Pair::key_as<Bool>() const {
  return key_as_Bool();
}

template<> inline const Int64 *Pair::key_as<Int64>() const {
  return key_as_Int64();
}

template<> inline const Double *Pair::key_as<Double>() const {
  return key_as_Double();
}

template<> inline const String *Pair::key_as<String>() const {
  return key_as_String();
}

template<> inline const Array *Pair::key_as<Array>() const {
  return key_as_Array();
}

template<> inline const Object *Pair::key_as<Object>() const {
  return key_as_Object();
}

template<> inline const Null *Pair::value_as<Null>() const {
  return value_as_Null();
}

template<> inline const Bool *Pair::value_as<Bool>() const {
  return value_as_Bool();
}

template<> inline const Int64 *Pair::value_as<Int64>() const {
  return value_as_Int64();
}

template<> inline const Double *Pair::value_as<Double>() const {
  return value_as_Double();
}

template<> inline const String *Pair::value_as<String>() const {
  return value_as_String();
}

template<> inline const Array *Pair::value_as<Array>() const {
  return value_as_Array();
}

template<> inline const Object *Pair::value_as<Object>() const {
  return value_as_Object();
}

struct PairBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key_type(Type key_type) {
    fbb_.AddElement<uint8_t>(Pair::VT_KEY_TYPE, static_cast<uint8_t>(key_type), 0);
  }
  void add_key(flatbuffers::Offset<void> key) {
    fbb_.AddOffset(Pair::VT_KEY, key);
  }
  void add_value_type(Type value_type) {
    fbb_.AddElement<uint8_t>(Pair::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Pair::VT_VALUE, value);
  }
  PairBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PairBuilder &operator=(const PairBuilder &);
  flatbuffers::Offset<Pair> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<Pair>(end);
    return o;
  }
};

inline flatbuffers::Offset<Pair> CreatePair(
    flatbuffers::FlatBufferBuilder &_fbb,
    Type key_type = Type_NONE,
    flatbuffers::Offset<void> key = 0,
    Type value_type = Type_NONE,
    flatbuffers::Offset<void> value = 0) {
  PairBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_value_type(value_type);
  builder_.add_key_type(key_type);
  return builder_.Finish();
}

struct Null FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct NullBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  NullBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NullBuilder &operator=(const NullBuilder &);
  flatbuffers::Offset<Null> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<Null>(end);
    return o;
  }
};

inline flatbuffers::Offset<Null> CreateNull(
    flatbuffers::FlatBufferBuilder &_fbb) {
  NullBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Bool FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct BoolBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(Bool::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  BoolBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BoolBuilder &operator=(const BoolBuilder &);
  flatbuffers::Offset<Bool> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Bool>(end);
    return o;
  }
};

inline flatbuffers::Offset<Bool> CreateBool(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool value = false) {
  BoolBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Int64 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  int64_t value() const {
    return GetField<int64_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct Int64Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int64_t value) {
    fbb_.AddElement<int64_t>(Int64::VT_VALUE, value, 0);
  }
  Int64Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Int64Builder &operator=(const Int64Builder &);
  flatbuffers::Offset<Int64> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Int64>(end);
    return o;
  }
};

inline flatbuffers::Offset<Int64> CreateInt64(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t value = 0) {
  Int64Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Double FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct DoubleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(Double::VT_VALUE, value, 0.0);
  }
  DoubleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DoubleBuilder &operator=(const DoubleBuilder &);
  flatbuffers::Offset<Double> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Double>(end);
    return o;
  }
};

inline flatbuffers::Offset<Double> CreateDouble(
    flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0) {
  DoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct String FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct StringBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(String::VT_VALUE, value);
  }
  StringBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StringBuilder &operator=(const StringBuilder &);
  flatbuffers::Offset<String> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<String>(end);
    return o;
  }
};

inline flatbuffers::Offset<String> CreateString(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  StringBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<String> CreateStringDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  return flattype::fbs::json::CreateString(
      _fbb,
      value ? _fbb.CreateString(value) : 0);
}

struct Array FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6
  };
  const flatbuffers::Vector<uint8_t> *value_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *value() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE_TYPE) &&
           verifier.Verify(value_type()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           VerifyTypeVector(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

struct ArrayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value_type) {
    fbb_.AddOffset(Array::VT_VALUE_TYPE, value_type);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> value) {
    fbb_.AddOffset(Array::VT_VALUE, value);
  }
  ArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayBuilder &operator=(const ArrayBuilder &);
  flatbuffers::Offset<Array> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Array>(end);
    return o;
  }
};

inline flatbuffers::Offset<Array> CreateArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> value = 0) {
  ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Array> CreateArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *value = nullptr) {
  return flattype::fbs::json::CreateArray(
      _fbb,
      value_type ? _fbb.CreateVector<uint8_t>(*value_type) : 0,
      value ? _fbb.CreateVector<flatbuffers::Offset<void>>(*value) : 0);
}

struct Object FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Pair>> *value() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Pair>> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.VerifyVectorOfTables(value()) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Pair>>> value) {
    fbb_.AddOffset(Object::VT_VALUE, value);
  }
  ObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ObjectBuilder &operator=(const ObjectBuilder &);
  flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline flatbuffers::Offset<Object> CreateObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Pair>>> value = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<Object> CreateObjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Pair>> *value = nullptr) {
  return flattype::fbs::json::CreateObject(
      _fbb,
      value ? _fbb.CreateVector<flatbuffers::Offset<Pair>>(*value) : 0);
}

struct Json FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6
  };
  Type value_type() const {
    return static_cast<Type>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Null *value_as_Null() const {
    return value_type() == Type_Null ? static_cast<const Null *>(value()) : nullptr;
  }
  const Bool *value_as_Bool() const {
    return value_type() == Type_Bool ? static_cast<const Bool *>(value()) : nullptr;
  }
  const Int64 *value_as_Int64() const {
    return value_type() == Type_Int64 ? static_cast<const Int64 *>(value()) : nullptr;
  }
  const Double *value_as_Double() const {
    return value_type() == Type_Double ? static_cast<const Double *>(value()) : nullptr;
  }
  const String *value_as_String() const {
    return value_type() == Type_String ? static_cast<const String *>(value()) : nullptr;
  }
  const Array *value_as_Array() const {
    return value_type() == Type_Array ? static_cast<const Array *>(value()) : nullptr;
  }
  const Object *value_as_Object() const {
    return value_type() == Type_Object ? static_cast<const Object *>(value()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyType(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Null *Json::value_as<Null>() const {
  return value_as_Null();
}

template<> inline const Bool *Json::value_as<Bool>() const {
  return value_as_Bool();
}

template<> inline const Int64 *Json::value_as<Int64>() const {
  return value_as_Int64();
}

template<> inline const Double *Json::value_as<Double>() const {
  return value_as_Double();
}

template<> inline const String *Json::value_as<String>() const {
  return value_as_String();
}

template<> inline const Array *Json::value_as<Array>() const {
  return value_as_Array();
}

template<> inline const Object *Json::value_as<Object>() const {
  return value_as_Object();
}

struct JsonBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value_type(Type value_type) {
    fbb_.AddElement<uint8_t>(Json::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Json::VT_VALUE, value);
  }
  JsonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  JsonBuilder &operator=(const JsonBuilder &);
  flatbuffers::Offset<Json> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Json>(end);
    return o;
  }
};

inline flatbuffers::Offset<Json> CreateJson(
    flatbuffers::FlatBufferBuilder &_fbb,
    Type value_type = Type_NONE,
    flatbuffers::Offset<void> value = 0) {
  JsonBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

inline bool VerifyType(flatbuffers::Verifier &verifier, const void *obj, Type type) {
  switch (type) {
    case Type_NONE: {
      return true;
    }
    case Type_Null: {
      auto ptr = reinterpret_cast<const Null *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_Bool: {
      auto ptr = reinterpret_cast<const Bool *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_Int64: {
      auto ptr = reinterpret_cast<const Int64 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_Double: {
      auto ptr = reinterpret_cast<const Double *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_String: {
      auto ptr = reinterpret_cast<const String *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_Array: {
      auto ptr = reinterpret_cast<const Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Type_Object: {
      auto ptr = reinterpret_cast<const Object *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyType(
        verifier,  values->Get(i), types->GetEnum<Type>(i))) {
      return false;
    }
  }
  return true;
}

inline const flattype::fbs::json::Json *GetJson(const void *buf) {
  return flatbuffers::GetRoot<flattype::fbs::json::Json>(buf);
}

inline bool VerifyJsonBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flattype::fbs::json::Json>(nullptr);
}

inline void FinishJsonBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flattype::fbs::json::Json> root) {
  fbb.Finish(root);
}

}  // namespace json
}  // namespace fbs
}  // namespace flattype

#endif  // FLATBUFFERS_GENERATED_JSON_FLATTYPE_FBS_JSON_H_
