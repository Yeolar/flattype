// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OBJECT_FTT_FBS_H_
#define FLATBUFFERS_GENERATED_OBJECT_FTT_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "base_generated.h"

namespace ftt {
namespace fbs {

struct Array;

struct Pair;

struct Object;

enum Json {
  Json_NONE = 0,
  Json_Null = 1,
  Json_Bool = 2,
  Json_Int64 = 3,
  Json_Double = 4,
  Json_String = 5,
  Json_Array = 6,
  Json_Object = 7,
  Json_MIN = Json_NONE,
  Json_MAX = Json_Object
};

inline Json (&EnumValuesJson())[8] {
  static Json values[] = {
    Json_NONE,
    Json_Null,
    Json_Bool,
    Json_Int64,
    Json_Double,
    Json_String,
    Json_Array,
    Json_Object
  };
  return values;
}

inline const char **EnumNamesJson() {
  static const char *names[] = {
    "NONE",
    "Null",
    "Bool",
    "Int64",
    "Double",
    "String",
    "Array",
    "Object",
    nullptr
  };
  return names;
}

inline const char *EnumNameJson(Json e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesJson()[index];
}

template<typename T> struct JsonTraits {
  static const Json enum_value = Json_NONE;
};

template<> struct JsonTraits<ftt::fbs::Null> {
  static const Json enum_value = Json_Null;
};

template<> struct JsonTraits<ftt::fbs::Bool> {
  static const Json enum_value = Json_Bool;
};

template<> struct JsonTraits<ftt::fbs::Int64> {
  static const Json enum_value = Json_Int64;
};

template<> struct JsonTraits<ftt::fbs::Double> {
  static const Json enum_value = Json_Double;
};

template<> struct JsonTraits<ftt::fbs::String> {
  static const Json enum_value = Json_String;
};

template<> struct JsonTraits<Array> {
  static const Json enum_value = Json_Array;
};

template<> struct JsonTraits<Object> {
  static const Json enum_value = Json_Object;
};

bool VerifyJson(flatbuffers::Verifier &verifier, const void *obj, Json type);
bool VerifyJsonVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Array FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6
  };
  const flatbuffers::Vector<uint8_t> *value_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *value() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE_TYPE) &&
           verifier.Verify(value_type()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           VerifyJsonVector(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

struct ArrayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value_type) {
    fbb_.AddOffset(Array::VT_VALUE_TYPE, value_type);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> value) {
    fbb_.AddOffset(Array::VT_VALUE, value);
  }
  ArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArrayBuilder &operator=(const ArrayBuilder &);
  flatbuffers::Offset<Array> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Array>(end);
    return o;
  }
};

inline flatbuffers::Offset<Array> CreateArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> value = 0) {
  ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Array> CreateArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *value = nullptr) {
  return ftt::fbs::CreateArray(
      _fbb,
      value_type ? _fbb.CreateVector<uint8_t>(*value_type) : 0,
      value ? _fbb.CreateVector<flatbuffers::Offset<void>>(*value) : 0);
}

struct Pair FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6,
    VT_NAME = 8
  };
  Json value_type() const {
    return static_cast<Json>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const ftt::fbs::Null *value_as_Null() const {
    return value_type() == Json_Null ? static_cast<const ftt::fbs::Null *>(value()) : nullptr;
  }
  const ftt::fbs::Bool *value_as_Bool() const {
    return value_type() == Json_Bool ? static_cast<const ftt::fbs::Bool *>(value()) : nullptr;
  }
  const ftt::fbs::Int64 *value_as_Int64() const {
    return value_type() == Json_Int64 ? static_cast<const ftt::fbs::Int64 *>(value()) : nullptr;
  }
  const ftt::fbs::Double *value_as_Double() const {
    return value_type() == Json_Double ? static_cast<const ftt::fbs::Double *>(value()) : nullptr;
  }
  const ftt::fbs::String *value_as_String() const {
    return value_type() == Json_String ? static_cast<const ftt::fbs::String *>(value()) : nullptr;
  }
  const Array *value_as_Array() const {
    return value_type() == Json_Array ? static_cast<const Array *>(value()) : nullptr;
  }
  const Object *value_as_Object() const {
    return value_type() == Json_Object ? static_cast<const Object *>(value()) : nullptr;
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Pair *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyJson(verifier, value(), value_type()) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

template<> inline const ftt::fbs::Null *Pair::value_as<ftt::fbs::Null>() const {
  return value_as_Null();
}

template<> inline const ftt::fbs::Bool *Pair::value_as<ftt::fbs::Bool>() const {
  return value_as_Bool();
}

template<> inline const ftt::fbs::Int64 *Pair::value_as<ftt::fbs::Int64>() const {
  return value_as_Int64();
}

template<> inline const ftt::fbs::Double *Pair::value_as<ftt::fbs::Double>() const {
  return value_as_Double();
}

template<> inline const ftt::fbs::String *Pair::value_as<ftt::fbs::String>() const {
  return value_as_String();
}

template<> inline const Array *Pair::value_as<Array>() const {
  return value_as_Array();
}

template<> inline const Object *Pair::value_as<Object>() const {
  return value_as_Object();
}

struct PairBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value_type(Json value_type) {
    fbb_.AddElement<uint8_t>(Pair::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Pair::VT_VALUE, value);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Pair::VT_NAME, name);
  }
  PairBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PairBuilder &operator=(const PairBuilder &);
  flatbuffers::Offset<Pair> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Pair>(end);
    fbb_.Required(o, Pair::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Pair> CreatePair(
    flatbuffers::FlatBufferBuilder &_fbb,
    Json value_type = Json_NONE,
    flatbuffers::Offset<void> value = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  PairBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Pair> CreatePairDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    Json value_type = Json_NONE,
    flatbuffers::Offset<void> value = 0,
    const char *name = nullptr) {
  return ftt::fbs::CreatePair(
      _fbb,
      value_type,
      value,
      name ? _fbb.CreateString(name) : 0);
}

struct Object FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Pair>> *value() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Pair>> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.VerifyVectorOfTables(value()) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Pair>>> value) {
    fbb_.AddOffset(Object::VT_VALUE, value);
  }
  ObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ObjectBuilder &operator=(const ObjectBuilder &);
  flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline flatbuffers::Offset<Object> CreateObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Pair>>> value = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<Object> CreateObjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Pair>> *value = nullptr) {
  return ftt::fbs::CreateObject(
      _fbb,
      value ? _fbb.CreateVector<flatbuffers::Offset<Pair>>(*value) : 0);
}

inline bool VerifyJson(flatbuffers::Verifier &verifier, const void *obj, Json type) {
  switch (type) {
    case Json_NONE: {
      return true;
    }
    case Json_Null: {
      auto ptr = reinterpret_cast<const ftt::fbs::Null *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Json_Bool: {
      auto ptr = reinterpret_cast<const ftt::fbs::Bool *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Json_Int64: {
      auto ptr = reinterpret_cast<const ftt::fbs::Int64 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Json_Double: {
      auto ptr = reinterpret_cast<const ftt::fbs::Double *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Json_String: {
      auto ptr = reinterpret_cast<const ftt::fbs::String *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Json_Array: {
      auto ptr = reinterpret_cast<const Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Json_Object: {
      auto ptr = reinterpret_cast<const Object *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyJsonVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyJson(
        verifier,  values->Get(i), types->GetEnum<Json>(i))) {
      return false;
    }
  }
  return true;
}

inline const ftt::fbs::Object *GetObject(const void *buf) {
  return flatbuffers::GetRoot<ftt::fbs::Object>(buf);
}

inline bool VerifyObjectBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ftt::fbs::Object>(nullptr);
}

inline void FinishObjectBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ftt::fbs::Object> root) {
  fbb.Finish(root);
}

}  // namespace fbs
}  // namespace ftt

#endif  // FLATBUFFERS_GENERATED_OBJECT_FTT_FBS_H_
