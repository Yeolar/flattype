// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TABLE_FTT_FBS_H_
#define FLATBUFFERS_GENERATED_TABLE_FTT_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "base_generated.h"
#include "matrix_generated.h"

namespace ftt {
namespace fbs {

struct Key8;

struct Key16;

struct Key32;

struct Key64;

struct SKey;

struct Index;

struct Table;

enum Key {
  Key_NONE = 0,
  Key_Key8 = 1,
  Key_Key16 = 2,
  Key_Key32 = 3,
  Key_Key64 = 4,
  Key_SKey = 5,
  Key_MIN = Key_NONE,
  Key_MAX = Key_SKey
};

inline Key (&EnumValuesKey())[6] {
  static Key values[] = {
    Key_NONE,
    Key_Key8,
    Key_Key16,
    Key_Key32,
    Key_Key64,
    Key_SKey
  };
  return values;
}

inline const char **EnumNamesKey() {
  static const char *names[] = {
    "NONE",
    "Key8",
    "Key16",
    "Key32",
    "Key64",
    "SKey",
    nullptr
  };
  return names;
}

inline const char *EnumNameKey(Key e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesKey()[index];
}

template<typename T> struct KeyTraits {
  static const Key enum_value = Key_NONE;
};

template<> struct KeyTraits<Key8> {
  static const Key enum_value = Key_Key8;
};

template<> struct KeyTraits<Key16> {
  static const Key enum_value = Key_Key16;
};

template<> struct KeyTraits<Key32> {
  static const Key enum_value = Key_Key32;
};

template<> struct KeyTraits<Key64> {
  static const Key enum_value = Key_Key64;
};

template<> struct KeyTraits<SKey> {
  static const Key enum_value = Key_SKey;
};

bool VerifyKey(flatbuffers::Verifier &verifier, const void *obj, Key type);
bool VerifyKeyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Key8 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_POS = 6
  };
  uint8_t key() const {
    return GetField<uint8_t>(VT_KEY, 0);
  }
  bool KeyCompareLessThan(const Key8 *o) const {
    return key() < o->key();
  }
  int KeyCompareWithValue(uint8_t val) const {
    const auto key = key();
    if (key < val) {
      return -1;
    } else if (key > val) {
      return 1;
    } else {
      return 0;
    }
  }
  uint8_t pos() const {
    return GetField<uint8_t>(VT_POS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_KEY) &&
           VerifyField<uint8_t>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct Key8Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(uint8_t key) {
    fbb_.AddElement<uint8_t>(Key8::VT_KEY, key, 0);
  }
  void add_pos(uint8_t pos) {
    fbb_.AddElement<uint8_t>(Key8::VT_POS, pos, 0);
  }
  Key8Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Key8Builder &operator=(const Key8Builder &);
  flatbuffers::Offset<Key8> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Key8>(end);
    return o;
  }
};

inline flatbuffers::Offset<Key8> CreateKey8(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t key = 0,
    uint8_t pos = 0) {
  Key8Builder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_key(key);
  return builder_.Finish();
}

struct Key16 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_POS = 6
  };
  uint16_t key() const {
    return GetField<uint16_t>(VT_KEY, 0);
  }
  bool KeyCompareLessThan(const Key16 *o) const {
    return key() < o->key();
  }
  int KeyCompareWithValue(uint16_t val) const {
    const auto key = key();
    if (key < val) {
      return -1;
    } else if (key > val) {
      return 1;
    } else {
      return 0;
    }
  }
  uint16_t pos() const {
    return GetField<uint16_t>(VT_POS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_KEY) &&
           VerifyField<uint16_t>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct Key16Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(uint16_t key) {
    fbb_.AddElement<uint16_t>(Key16::VT_KEY, key, 0);
  }
  void add_pos(uint16_t pos) {
    fbb_.AddElement<uint16_t>(Key16::VT_POS, pos, 0);
  }
  Key16Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Key16Builder &operator=(const Key16Builder &);
  flatbuffers::Offset<Key16> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Key16>(end);
    return o;
  }
};

inline flatbuffers::Offset<Key16> CreateKey16(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t key = 0,
    uint16_t pos = 0) {
  Key16Builder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_key(key);
  return builder_.Finish();
}

struct Key32 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_POS = 6
  };
  uint32_t key() const {
    return GetField<uint32_t>(VT_KEY, 0);
  }
  bool KeyCompareLessThan(const Key32 *o) const {
    return key() < o->key();
  }
  int KeyCompareWithValue(uint32_t val) const {
    const auto key = key();
    if (key < val) {
      return -1;
    } else if (key > val) {
      return 1;
    } else {
      return 0;
    }
  }
  uint32_t pos() const {
    return GetField<uint32_t>(VT_POS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY) &&
           VerifyField<uint32_t>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct Key32Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(uint32_t key) {
    fbb_.AddElement<uint32_t>(Key32::VT_KEY, key, 0);
  }
  void add_pos(uint32_t pos) {
    fbb_.AddElement<uint32_t>(Key32::VT_POS, pos, 0);
  }
  Key32Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Key32Builder &operator=(const Key32Builder &);
  flatbuffers::Offset<Key32> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Key32>(end);
    return o;
  }
};

inline flatbuffers::Offset<Key32> CreateKey32(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key = 0,
    uint32_t pos = 0) {
  Key32Builder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_key(key);
  return builder_.Finish();
}

struct Key64 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_POS = 6
  };
  uint64_t key() const {
    return GetField<uint64_t>(VT_KEY, 0);
  }
  bool KeyCompareLessThan(const Key64 *o) const {
    return key() < o->key();
  }
  int KeyCompareWithValue(uint64_t val) const {
    const auto key = key();
    if (key < val) {
      return -1;
    } else if (key > val) {
      return 1;
    } else {
      return 0;
    }
  }
  uint64_t pos() const {
    return GetField<uint64_t>(VT_POS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_KEY) &&
           VerifyField<uint64_t>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct Key64Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(uint64_t key) {
    fbb_.AddElement<uint64_t>(Key64::VT_KEY, key, 0);
  }
  void add_pos(uint64_t pos) {
    fbb_.AddElement<uint64_t>(Key64::VT_POS, pos, 0);
  }
  Key64Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Key64Builder &operator=(const Key64Builder &);
  flatbuffers::Offset<Key64> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Key64>(end);
    return o;
  }
};

inline flatbuffers::Offset<Key64> CreateKey64(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t key = 0,
    uint64_t pos = 0) {
  Key64Builder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_key(key);
  return builder_.Finish();
}

struct SKey FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_POS = 6
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool KeyCompareLessThan(const SKey *o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(key()->c_str(), val);
  }
  uint64_t pos() const {
    return GetField<uint64_t>(VT_POS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.Verify(key()) &&
           VerifyField<uint64_t>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct SKeyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(SKey::VT_KEY, key);
  }
  void add_pos(uint64_t pos) {
    fbb_.AddElement<uint64_t>(SKey::VT_POS, pos, 0);
  }
  SKeyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SKeyBuilder &operator=(const SKeyBuilder &);
  flatbuffers::Offset<SKey> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<SKey>(end);
    fbb_.Required(o, SKey::VT_KEY);
    return o;
  }
};

inline flatbuffers::Offset<SKey> CreateSKey(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    uint64_t pos = 0) {
  SKeyBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<SKey> CreateSKeyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    uint64_t pos = 0) {
  return ftt::fbs::CreateSKey(
      _fbb,
      key ? _fbb.CreateString(key) : 0,
      pos);
}

struct Index FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_IDX_TYPE = 6,
    VT_IDX = 8
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool KeyCompareLessThan(const Index *o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(key()->c_str(), val);
  }
  const flatbuffers::Vector<uint8_t> *idx_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_IDX_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *idx() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_IDX);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.Verify(key()) &&
           VerifyOffset(verifier, VT_IDX_TYPE) &&
           verifier.Verify(idx_type()) &&
           VerifyOffset(verifier, VT_IDX) &&
           verifier.Verify(idx()) &&
           VerifyKeyVector(verifier, idx(), idx_type()) &&
           verifier.EndTable();
  }
};

struct IndexBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Index::VT_KEY, key);
  }
  void add_idx_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> idx_type) {
    fbb_.AddOffset(Index::VT_IDX_TYPE, idx_type);
  }
  void add_idx(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> idx) {
    fbb_.AddOffset(Index::VT_IDX, idx);
  }
  IndexBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IndexBuilder &operator=(const IndexBuilder &);
  flatbuffers::Offset<Index> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Index>(end);
    fbb_.Required(o, Index::VT_KEY);
    return o;
  }
};

inline flatbuffers::Offset<Index> CreateIndex(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> idx_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> idx = 0) {
  IndexBuilder builder_(_fbb);
  builder_.add_idx(idx);
  builder_.add_idx_type(idx_type);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<Index> CreateIndexDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const std::vector<uint8_t> *idx_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *idx = nullptr) {
  return ftt::fbs::CreateIndex(
      _fbb,
      key ? _fbb.CreateString(key) : 0,
      idx_type ? _fbb.CreateVector<uint8_t>(*idx_type) : 0,
      idx ? _fbb.CreateVector<flatbuffers::Offset<void>>(*idx) : 0);
}

struct Table FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INDEXES = 4,
    VT_FIELDS = 6,
    VT_MATRIX = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<Index>> *indexes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Index>> *>(VT_INDEXES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *fields() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_FIELDS);
  }
  const ftt::fbs::Matrix *matrix() const {
    return GetPointer<const ftt::fbs::Matrix *>(VT_MATRIX);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INDEXES) &&
           verifier.Verify(indexes()) &&
           verifier.VerifyVectorOfTables(indexes()) &&
           VerifyOffset(verifier, VT_FIELDS) &&
           verifier.Verify(fields()) &&
           verifier.VerifyVectorOfStrings(fields()) &&
           VerifyOffset(verifier, VT_MATRIX) &&
           verifier.VerifyTable(matrix()) &&
           verifier.EndTable();
  }
};

struct TableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_indexes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Index>>> indexes) {
    fbb_.AddOffset(Table::VT_INDEXES, indexes);
  }
  void add_fields(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> fields) {
    fbb_.AddOffset(Table::VT_FIELDS, fields);
  }
  void add_matrix(flatbuffers::Offset<ftt::fbs::Matrix> matrix) {
    fbb_.AddOffset(Table::VT_MATRIX, matrix);
  }
  TableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TableBuilder &operator=(const TableBuilder &);
  flatbuffers::Offset<Table> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Table>(end);
    return o;
  }
};

inline flatbuffers::Offset<Table> CreateTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Index>>> indexes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> fields = 0,
    flatbuffers::Offset<ftt::fbs::Matrix> matrix = 0) {
  TableBuilder builder_(_fbb);
  builder_.add_matrix(matrix);
  builder_.add_fields(fields);
  builder_.add_indexes(indexes);
  return builder_.Finish();
}

inline flatbuffers::Offset<Table> CreateTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Index>> *indexes = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *fields = nullptr,
    flatbuffers::Offset<ftt::fbs::Matrix> matrix = 0) {
  return ftt::fbs::CreateTable(
      _fbb,
      indexes ? _fbb.CreateVector<flatbuffers::Offset<Index>>(*indexes) : 0,
      fields ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*fields) : 0,
      matrix);
}

inline bool VerifyKey(flatbuffers::Verifier &verifier, const void *obj, Key type) {
  switch (type) {
    case Key_NONE: {
      return true;
    }
    case Key_Key8: {
      auto ptr = reinterpret_cast<const Key8 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Key_Key16: {
      auto ptr = reinterpret_cast<const Key16 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Key_Key32: {
      auto ptr = reinterpret_cast<const Key32 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Key_Key64: {
      auto ptr = reinterpret_cast<const Key64 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Key_SKey: {
      auto ptr = reinterpret_cast<const SKey *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyKeyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyKey(
        verifier,  values->Get(i), types->GetEnum<Key>(i))) {
      return false;
    }
  }
  return true;
}

inline const ftt::fbs::Table *GetTable(const void *buf) {
  return flatbuffers::GetRoot<ftt::fbs::Table>(buf);
}

inline bool VerifyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ftt::fbs::Table>(nullptr);
}

inline void FinishTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ftt::fbs::Table> root) {
  fbb.Finish(root);
}

}  // namespace fbs
}  // namespace ftt

#endif  // FLATBUFFERS_GENERATED_TABLE_FTT_FBS_H_
